
/etc/init.d/uwb start
/magichome/xruser/bin/start.wusb           runs the "/magichome/xruser/wusb/wusb_tap_brtypege.lnx tap0"

/magichome/xruser/bin/startDevMgr.sh       start the device_manager.py

拨打外线:
9 + 电话号码 # sso 后6位 #
拨打国外电话:
Out of China : 
“9” + 00 + country code + phone number + “#” + SSO last 6 digital + “#”
e.g. : 9 + 00 + 91 + 80 40885804 + # + 018636 + #



lsmod | grep uwb
lsmod | grep wusb
lsmod | grep skeleton

egrep '(nginx|Ptype)'


delete route from MyWorkshop: route -> task -> EditAll.
route order: create route -> order.


cal:
/magichome/xruser/bin/copyCalFiles.sh

UWB channel change release doc: doc1010791

find /sys/devices/ -name bandwtypeth    # 读取带宽
echo 0 > `find /sys/devices -name bandwtypeth_on_off`  # 带宽开关
cat `find /sys/devices -name beacon | grep uwb`  #读取channel
cat `find /sys/devices -name RSSI`    #radio signal strength
cat `find /sys/devices -name LQE`     #link quality


robot: GE Acronym Information Bot

3.28.218.42
---------------------------------------

device manager
decrypt module
wusb gui
wusb tap brtypege
country config module
channel managerment module

--> kernel related issue
dongle driver
detector driver

WUSB Host Wire Adapter driver
wusb core module(security sysfs and so on)
uwb stack module driver

-----------------------------------------

detector ipaddr: 192.168.3.50

/magichome/xruser/engg/collectLogs.sh  snapshot

/usr/bin/x11vnc -geometry 800x600 -forever -shared -xkb -display :0 > /dev/null 2>&1 &
/usr/bin/x11vnc -forever -shared -xkb -display :0 > /dev/null 2>&1 &

mount -oro,loop *.iso /mnt

tune2fs -l /dev/..
tune2fs -i 
tune2fs -c 
dumpe2fs -h /dev/hda4
,,

rpm -qpl packetname.rpm
rpm -qf file
rpm2cpio xx.rpm | cpio -div

来自: http://man.linuxde.net/rpm2cpio

agent: http://corp.setpac.ge.com/pac.pac


OUTPUTS=$(xrandr |awk '$2 ~ /connected/ {print $1}')
xrandr -s 1024×768
xrandr --screen 0/1/2/3

ge5158@1zxp

http://corp.setpac.ge.com/pac.pac
http://gems.setpac.ge.com/pac.pac

3.20.128.5:88
3.36.157.38/77

//make iso ===================
http://wiki.health.ge.com/gehcwiki/index.php/HELiOS_Remaster

报销话费
http://supportcentral.ge.com/dataforms/sup_dataform_display_beta.asp?dataform_type=503347

Tcon: 44500
mobile tcon : 400-670-0319

elearning: https://geportal.sumtotalsystems.com/sites/100054/SitePages/GE_Learning.aspx
doors: https://citrix.health.ge.com/Citrix/SFMKE01Web/    passwd:doors123
clearQuest: https://defectmanagement.health.ge.com/cqweb/#
helpdesk: https://ge.service-now.com/Helpdesk/
myworkshop: http://myworkshop.health.ge.com/enovia/common/emxNavigator.jsp?timeZoneOffset=-8
onetypem: https://onetypem.ge.com/
rally: https://rally1.rallydev.com/#/49560940246u/dashboard
e-leave:https://geabsence.com/
Atlas Data Manager Link Changed to :http://3.204.20.157/datafiles/

CST: ctt.med.ge.com

/Global 1/SSVP/BOSS     -- ose doors   
doors passwd: doors123

fz027761@3.204.29.140  passwd:ge123

/Global 1/SSVP/Connectivity/wusb host
  -- SSRS TRACEBLILITY: USER -> XR(MR) -> print and check Traceblility.xml

user:insite
pw:2getin

#include <linux/delay.h>
ssleep();

wusbhc_b_destroy(&hwahc->wusbhc);
        usb_remove_hcd(usb_hcd);
        hwahc_destroy(hwahc);
        usb_put_hcd(usb_hcd);
           ---------------------------------------------------

echo "Copying rpms and settings to local folder"
scp swlab@3.204.36.104:/home/swlab/SB_PC_Obso_2016/packages/latest/* .

SUIF:
/magichome/xruser/bin/start.csd
/export/home/insite/server/csd/menu

ct mkview 
ct lsview
ct setview
ct edcs
ct ls
ct pwv

ct desc xx  -- 查看label等信息

ct mkelement

---check in folder ---------
ct ci -nc .
ct mkdir –nc BDOTSDevice
cp otsDevice.cfg ./BDOTSDevice/
ct mkelem –ci –nc otsDevice.cfg
ct ci -nc BDOTSDevice
ct ci -nc .
-------------------------------


1. 创建view
./saberNewViewcc7 -n ose-sb_pcobso
ct setview ose-sb_pcobso
ct edcs          -------------------------------------------------> element * CHECKEDOUT \ element * /main/LATEST
                 ----------> modify
ct co -nc ./

2. revome checkin folders
ct co -nc path
ct rm file

ct diff -pred
ct unco
ct lsco -r -cview
----------merge------------
ct findmerge . -ftag saber.integ.646VCP.32bit -print
ct findmerge ./ -ftag saber.integ.646VCP.32bit -nc -merge
---------------------------


2. create folder
/vobs/cly_platform/src/ose-HELiOS6/ 权限打开，可以编辑
3. check out, check in
4. label


psql protocolDB
\d
select * from table;


reli. server:
10.189.134.228
/media/xrayreli/logs/Internal
(xray/xray)



---XR646VCP
1. create view
./clypView_ccv7 -n clypso-XR646VCP
     Please enter the Vob tag of the VOB you want to create the branch type in . For Example: /vobs/atlas?    /vobs/cly_platform

2. 



set autoindent     " 换行自动缩进
set shiftwidth=4   " 自动缩进时的宽度
set ts=4           " tabstop的宽度
set expandtab      " tab换成空格  
set softtabstop=4  " 退格键
set paste          " 粘贴时不自动换行

vim /export/home/insite/server/cgi-bin/checkSecurity.cgi
修改
$access = `~insite/server/cgi-bin/propLevelScript.pl`;
$access = 1;



snapshot: \\USMKEDZRSP01.am.health.ge.com\Reactive_Service_Global\Escalations-EU



echo "2^12" | bc    

grep "str" ./ -rn 
grep -i "str" ./ -rn
grep -v "str"

watch --interval=0.1 dmesg

vim 替换：1,$s/str1/str2/g   --替换第一行到最后一行/global
          sed -i "s/old/new/g" `grep old -rl /www`  -- 替换/www文件夹下所有old字符串为new

	ctrl-v 进入纵向编辑模式
	G 移动游标到最后一行第一列，可视块覆盖了第一列
	I 进入行首插入模式
	输入
	ESC
	
vim 分屏
    :vs  文件路径/文件名      在新的垂直分屏中打开文件
	:sv  文件路径/文件名      在新的水平分屏中打开文件
    :new，新建文件并分屏， 快捷键，Ctrl+W，然后马上按n键
	:spilt 水平分屏，将当前屏分为两个，水平的。   Ctrl + w, s
	:vsplit 垂直分屏，将当前屏分为两个，垂直的。  Ctrl + w, v
	:only 取消分屏，取消当前的屏，当前屏指的是光标所在屏。
	
	Ctrl + w, w 后一个
	Ctrl + w, p 前一个
	Ctrl + w, h 四个方向
	Ctrl + w, i
	Ctrl + w, k
	Ctrl + w, l
	
vim 中使用 Ctrl-O 执行后退，使用 Ctrl-I 执行前进
    u   撤销上一步的操作
    Ctrl+r 恢复上一步被撤销的操作
	
	
	
vim删除包含特定字符的行：
g/pattern/d   
1.删除含有“#”开头的行
:% g/^#/d 
匹配删除含有特定字符的行就去掉“^”，也可以匹配结尾“$”
2.删除空行
:% g/^$/d 
3.删除不含该字符串的行
:% v/pattern/d 
还有另一中方法：
:% g!/pattern/d 
4.如何对每行只保留匹配内容而删除这一行中的其它内容，这个有点技术含量
:%s/^.*\(pattern\).*$/\1/g 
5.删除包含特定字符串的行，这也就是第一条一样的。
:g/pattern/d 
6.删除包含特定字符串的行,每次删除前都提示
:%s/^.*pattern.*\n//c 
7. 处理字符串: /123/456/789/109/example.txt, 怎么删除到最后一个/,然后得到example.txt ?
0dte 
说明：0     到行首
      dte   删到第一个e
8. 处理字符串: /123/456/789/ef/109/example.txt, 怎么删除到最后一个/,然后得到example.txt ?
$T/d0 
说明：$     到行尾
      T/    从后往前搜到第一个/
      d0    删到行首
d/ex然后回车
说明：d     删除
      /ex   搜到第一个ex


在一个文本文件中的每一行头插入一个字符: awk '{print "X"$0}' file
在一个文本文件中的每一行尾插入一个字符: awk '{print $0"X"}' urfile
在一个文本文件中的每一行的指定列插入一串字符: awk '$O=$O" X"' urfile

awk -F ',' '{if($6 ~ "BootLevel=NORMAL;enum BootPhase=PHASE_1") print $0}' sniffer*.csv

sed '5,30d' /etc/passwd    ##删除5至30行内容（不会修改原文件）
sed '/nologin$/d' /etc/passwd   ##删除以nologin结尾的行（不会修改原文件）
sed -e “s/$var1/$var2/g” filename ##使用变量替换(使用双引号)
sed -i ‘1 i\插入字符串’ filename  ##在第一行前插入文本
sed -i ‘$ a\插入字符串’ filename  ##在匹配行前插入
sed -i ‘/pattern/ a “插入字符串”‘ filename ##在匹配行后插入


sed -e "s/libTimerLib.so/libDCSerialComm.so/g" filename


/etc/udev/rules.d/70-persistent-net.rules

gdb:
gdb -core core.\!magichome\!xruser\!bin\!ImChain.lnx.166145 ImChain.lnx
/magichome/xruser/bin/sysCleanup.pl   corefile update to coretrace

user: geservice:
passwd:Svc4Ev@rest

UWB debug 技巧:
图， errorlog， devicemanager， channleManger， devMasterServer.log -- ( WirelessDMM )
查看是否丢图：sysMSG.log



-x 表示可执行文件



查看本机网卡：
find /sys/devices/ -name eth*
查找所有java文件，并执行fgrep命令查找 xxxx，最后显示行数
find . -type f(f:file,d:dir) -name \*.jave -exec fgrep -Hn xxxx {} \; 
grep "[A-Z][9]D" test.txt 显示输出第一个字符的范围是“A-D”，第二个字符是“9”，第三个字符的是“D”的所有的行
grep "[35]..1998" test.txt 显示第一个字符是3或5，第二三个字符是任意，以1998结尾的所有行
grep "4/{2,/}" test.txt 模式出现几率查找：显示输出字符“4”至少重复出现两次的所有行
grep "9/{3,/}" test.txt 模式出现几率查找：显示输出字符“9”至少重复出现三次的所有行
grep "9/{2,3/}" test.txt 模式出现几率查找：显示输出字符“9”重复出现的次数在一定范围内，重复出现2次或3次所有行
sed -e "s/./\n/g" | wc -l   -- 将所有.替换成\n， 同时统计
/bin/bash -ex   将执行的脚本命令打印出来。

cat /proc/net/arp 查看连接到本机的远端ip的mac地址

route: netstat -r
ip r s
route add -host xx.xx.xx.xx eth*


USB  抓包：===================

modprobe usbmon
mount -t debugfs none_debugs /sys/kernel/debug



确定bus数据已经准备就绪

ls /sys/kernel/debug/usb/usbmon
    0s  0u  1s  1t  1u  2s  2t  2u  3s  3t  3u  4s  4t  4u







tcpdump 抓包 ==================
基本语法

过滤主机
--------
- 抓取所有经过 eth1，目的或源地址是 192.168.1.1 的网络数据
# tcpdump -i eth1 host 192.168.1.1
- 源地址
# tcpdump -i eth1 src host 192.168.1.1
- 目的地址
# tcpdump -i eth1 dst host 192.168.1.1
过滤端口
--------
- 抓取所有经过 eth1，目的或源端口是 25 的网络数据
# tcpdump -i eth1 port 25
- 源端口
# tcpdump -i eth1 src port 25
- 目的端口
# tcpdump -i eth1 dst port 25网络过滤
--------
# tcpdump -i eth1 net 192.168
# tcpdump -i eth1 src net 192.168
# tcpdump -i eth1 dst net 192.168
协议过滤
--------
# tcpdump -i eth1 arp
# tcpdump -i eth1 ip
# tcpdump -i eth1 tcp
# tcpdump -i eth1 udp
# tcpdump -i eth1 icmp
常用表达式
----------
非 : ! or "not" (去掉双引号)
且 : && or "and"
或 : || or "or"
- 抓取所有经过 eth1，目的地址是 192.168.1.254 或 192.168.1.200 端口是 80 的 TCP 数据
# tcpdump -i eth1 '((tcp) and (port 80) and ((dst host 192.168.1.254) or (dst host
192.168.1.200)))'
- 抓取所有经过 eth1，目标 MAC 地址是 00:01:02:03:04:05 的 ICMP 数据
# tcpdump -i eth1 '((icmp) and ((ether dst host 00:01:02:03:04:05)))'
- 抓取所有经过 eth1，目的网络是 192.168，但目的主机不是 192.168.1.200 的 TCP 数据
# tcpdump -i eth1 '((tcp) and ((dst net 192.168) and (not dst host 192.168.1.200)))'


- 只抓 SYN 包
# tcpdump -i eth1 'tcp[tcpflags] = tcp-syn'
- 抓 SYN, ACK
# tcpdump -i eth1 'tcp[tcpflags] & tcp-syn != 0 and tcp[tcpflags] & tcp-ack != 0'
抓 SMTP 数据
----------
# tcpdump -i eth1 '((port 25) and (tcp[(tcp[12]>>2):4] = 0x4d41494c))'
抓取数据区开始为"MAIL"的包，"MAIL"的十六进制为 0x4d41494c。
抓 HTTP GET 数据
--------------
# tcpdump -i eth1 'tcp[(tcp[12]>>2):4] = 0x47455420'
"GET "的十六进制是 47455420
抓 SSH 返回
---------
# tcpdump -i eth1 'tcp[(tcp[12]>>2):4] = 0x5353482D'
"SSH-"的十六进制是 0x5353482D


# tcpdump -i eth1 '(tcp[(tcp[12]>>2):4] = 0x5353482D) and (tcp[((tcp[12]>>2)+4):2]
= 0x312E)'抓老版本的 SSH 返回信息，如"SSH-1.99.."


- 抓 DNS 请求数据
# tcpdump -i eth1 udp dst port 53
其他
----
-c 参数对于运维人员来说也比较常用，因为流量比较大的服务器，靠人工 CTRL+C 还是
抓的太多，于是可以用-c 参数指定抓多少个包。
# time tcpdump -nn -i eth0 'tcp[tcpflags] = tcp-syn' -c 10000 > /dev/null
上面的命令计算抓 10000 个 SYN 包花费多少时间，可以判断访问量大概是多少。


实时抓取端口号8000的GET包，然后写入GET.log

tcp  -i eth0 '((port 8000) and (tcp[(tcp[12]>>2):4]=0x47455420))' -nnAl -w /tmp/GET.log


netstat
-a (all)显示所有选项，默认不显示LISTEN相关
-t (tcp)仅显示tcp相关选项
-u (udp)仅显示udp相关选项
-n 拒绝显示别名，能显示数字的全部转化成数字。
-l 仅列出有在 Listen (监听) 的服務状态

-p 显示建立相关链接的程序名
-r 显示路由信息，路由表
-e 显示扩展信息，例如utype等
-s 按各个协议进行统计
-c 每隔一个固定时间，执行该netstat命令。

提示：LISTEN和LISTENING的状态只有用-a或者-l才能看到


export LC_CTYPE=zh_CN.GBK

RCM 板


3.36.157.233:
root pwd:install 


大体的规则：　
         120-129  10个地址用于build server.
         140-149  10 个地址用于ＣＩ服务器，和各个ｔｅａｍ的ｍａｇｉｃ　ＰＣ
         150-169  20 个地址 用于各个team的ｂｅｎｃｈ搭建。
         170-180  10 用于功能服务器２３２／１６０之类的 加上ＯＳ bench.
		 
		 
		 
OS ==========================================================================================		 
OS 正常关机的log：
xinetd Exiting -> The audit deamon is exiting -> Kernel logging (proc) stopped.
Ext4 Journaling模式。日志模式，日志总归有一些开销，Ext4

calypso log:
access.log


=============================================================================================
ACE TAO CIAO

ACE、TAO、CIAO
1.1.1 ACE
ACE 自适配通信环境（ADAPTIVE Communication Environment）是可自由使用、开放源码的面向对象（OO）框架（framework） ，它实现了许多用于并发通信软件的核心模式。
ACE 提供了一组丰富的可重用 C++包装外观（wrapper facade）和框架组件，可跨多种平台完成通用的通信软件任务，其中包括：事件多路分离和事件处理器分派、信号处理、服务初始化、进程间通信、共享内存管理、消息路由、分布式服务动态（重）配置、并发执行和同步，等等。
ACE 的目标用户是高性能和实时通信服务和应用的开发者。它简化了使用进程间通信、事件多路分离、显式动态链接和并发的 OO网络应用和服务的开发。此外，通过服务在运行时与应用的动态链接，ACE 使系统的配置和重配置得以自动化。
1.1.2 TAO
The ACE ORB（TAO） ：TAO 是使用 ACE 提供的框架组件和模式构建的 CORBA 实时实现，包含有网络接口、OS、通信协议和 CORBA 中间件组件及特性。TAO 基于标准的 OMG CORBA 参考模型，并进行了增强的设计，以克服传统的用于高性能和实时应用的 ORB 的缺点。TAO像 ACE 一样，也是可自由使用的开放源码软件。
1.1.3 CIAO
CIAO（Component Integrated ACE ORB）则是在TAO基础上的一个CORBA Component Model实现，同时CIAO也是目前相对比较成熟的一个CCM实现。



tether eth J7  eth2
ws J4   eth1
Table J5  eth0
eth3 cycler

sysfs: 基于ramfs，即出现在/sys/devices下的设备

when estop recovery happens, typeC sends 'configuremodule' call to DeviceManager, which is in ASTRA23:50
The configuremodule call has an XML as data, which indicates the call is for what DMM in the system23:50
based on the XML, ASTRA will make call on the DMM23:50
typeC makes 'configuremodule' call for both WiredDMM and WirelessDMM23:51
when Devicemanager receives the call, it will invoke 'config' API on the corresponding DMM23:51
There is no check in Devicemanager to see if previous 'config' call is done or not before making new call


votype XRImDet::uponEvent (unsigned short evtype, const EventData & eventData)

IMDET :,1,0,XRImDetImpl.cpp,2202,14:33:38.710.172,5479,1580206960,XRImDet::_configureDMMModule() Enter



---------- astra-lite --------
element /vobs/astra-lite/... ASTRA-LITE_PLATFORM_2017_FW44.2
/vobs/astra-lite/Communication/CommLite/test/src

CAN analyzer:
03:08:21.557.573 641 8 0 13 03 CC 10 AC 0D 00 00


